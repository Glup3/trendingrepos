// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// SearchReposResponse is returned by SearchRepos on success.
type SearchReposResponse struct {
	// Perform a search across resources, returning a maximum of 1,000 results.
	Search SearchReposSearchSearchResultItemConnection `json:"search"`
}

// GetSearch returns SearchReposResponse.Search, and is useful for accessing the field via an interface.
func (v *SearchReposResponse) GetSearch() SearchReposSearchSearchResultItemConnection {
	return v.Search
}

// SearchReposSearchSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query. Regardless of the number
// of matches, a maximum of 1,000 results will be available across all types,
// potentially split across many pages.
type SearchReposSearchSearchResultItemConnection struct {
	// The total number of repositories that matched the search query. Regardless of
	// the total number of matches, a maximum of 1,000 results will be available
	// across all types.
	RepositoryCount int `json:"repositoryCount"`
	// A list of edges.
	Edges []SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge `json:"edges"`
}

// GetRepositoryCount returns SearchReposSearchSearchResultItemConnection.RepositoryCount, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnection) GetRepositoryCount() int {
	return v.RepositoryCount
}

// GetEdges returns SearchReposSearchSearchResultItemConnection.Edges, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnection) GetEdges() []SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge {
	return v.Edges
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge includes the requested fields of the GraphQL type SearchResultItemEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge struct {
	// The item at the end of the edge.
	Node SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem `json:"-"`
}

// GetNode returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge) GetNode() SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem {
	return v.Node
}

func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge) __premarshalJSON() (*__premarshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge, error) {
	var retval __premarshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node: %w", err)
		}
	}
	return &retval, nil
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// A GitHub App.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) GetTypename() string {
	return v.Typename
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion includes the requested fields of the GraphQL type Discussion.
// The GraphQL type's documentation follows.
//
// A discussion in a repository.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) GetTypename() string {
	return v.Typename
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) GetTypename() string {
	return v.Typename
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing includes the requested fields of the GraphQL type MarketplaceListing.
// The GraphQL type's documentation follows.
//
// A listing in the GitHub integration marketplace.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) GetTypename() string {
	return v.Typename
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) GetTypename() string {
	return v.Typename
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) GetTypename() string {
	return v.Typename
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository struct {
	Typename string `json:"__typename"`
	// The Node ID of the Repository object
	Id string `json:"id"`
	// Returns a count of how many stargazers there are on this object
	StargazerCount int `json:"stargazerCount"`
	// The description of the repository.
	Description string `json:"description"`
	// The repository's name with owner.
	NameWithOwner string `json:"nameWithOwner"`
	// The primary language of the repository's code.
	PrimaryLanguage SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepositoryPrimaryLanguage `json:"primaryLanguage"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetTypename() string {
	return v.Typename
}

// GetId returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Id, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetId() string {
	return v.Id
}

// GetStargazerCount returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.StargazerCount, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetStargazerCount() int {
	return v.StargazerCount
}

// GetDescription returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Description, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetDescription() string {
	return v.Description
}

// GetNameWithOwner returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.NameWithOwner, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetNameWithOwner() string {
	return v.NameWithOwner
}

// GetPrimaryLanguage returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.PrimaryLanguage, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetPrimaryLanguage() SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepositoryPrimaryLanguage {
	return v.PrimaryLanguage
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepositoryPrimaryLanguage includes the requested fields of the GraphQL type Language.
// The GraphQL type's documentation follows.
//
// Represents a given language found in repositories.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepositoryPrimaryLanguage struct {
	// The name of the current language.
	Name string `json:"name"`
}

// GetName returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepositoryPrimaryLanguage.Name, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepositoryPrimaryLanguage) GetName() string {
	return v.Name
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem includes the requested fields of the GraphQL interface SearchResultItem.
//
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem is implemented by the following types:
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository
// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser
// The GraphQL type's documentation follows.
//
// The results of a search.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem interface {
	implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) implementsGraphQLInterfaceSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}

func __unmarshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(b []byte, v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "App":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "MarketplaceListing":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest)
		return json.Unmarshal(b, *v)
	case "Repository":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchResultItem.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem: "%v"`, tn.TypeName)
	}
}

func __marshalSearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp:
		typename = "App"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing:
		typename = "MarketplaceListing"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest:
		typename = "PullRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository
		}{typename, v}
		return json.Marshal(result)
	case *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem: "%T"`, v)
	}
}

// SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser struct {
	Typename string `json:"__typename"`
}

// GetTypename returns SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *SearchReposSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) GetTypename() string {
	return v.Typename
}

// __SearchReposInput is used internally by genqlient
type __SearchReposInput struct {
	Query  string `json:"query"`
	Limit  int    `json:"limit"`
	Cursor string `json:"cursor"`
}

// GetQuery returns __SearchReposInput.Query, and is useful for accessing the field via an interface.
func (v *__SearchReposInput) GetQuery() string { return v.Query }

// GetLimit returns __SearchReposInput.Limit, and is useful for accessing the field via an interface.
func (v *__SearchReposInput) GetLimit() int { return v.Limit }

// GetCursor returns __SearchReposInput.Cursor, and is useful for accessing the field via an interface.
func (v *__SearchReposInput) GetCursor() string { return v.Cursor }

// The query executed by SearchRepos.
const SearchRepos_Operation = `
query SearchRepos ($query: String!, $limit: Int!, $cursor: String!) {
	search(type: REPOSITORY, query: $query, first: $limit, after: $cursor) {
		repositoryCount
		edges {
			node {
				__typename
				... on Repository {
					id
					stargazerCount
					description
					nameWithOwner
					primaryLanguage {
						name
					}
				}
			}
		}
	}
}
`

func SearchRepos(
	ctx_ context.Context,
	client_ graphql.Client,
	query string,
	limit int,
	cursor string,
) (data_ *SearchReposResponse, err_ error) {
	req_ := &graphql.Request{
		OpName: "SearchRepos",
		Query:  SearchRepos_Operation,
		Variables: &__SearchReposInput{
			Query:  query,
			Limit:  limit,
			Cursor: cursor,
		},
	}

	data_ = &SearchReposResponse{}
	resp_ := &graphql.Response{Data: data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return data_, err_
}
