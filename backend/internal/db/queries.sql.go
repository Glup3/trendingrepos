// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTempRepositories = `-- name: CreateTempRepositories :exec
CREATE TEMPORARY TABLE temp_repositories (LIKE repositories INCLUDING ALL) ON COMMIT DROP
`

func (q *Queries) CreateTempRepositories(ctx context.Context) error {
	_, err := q.db.Exec(ctx, createTempRepositories)
	return err
}

const insertRepositories = `-- name: InsertRepositories :exec
INSERT INTO repositories
SELECT github_id, name_with_owner, description, stars, primary_language, is_archived FROM temp_repositories
ON CONFLICT (github_id) DO UPDATE
SET
  stars = EXCLUDED.stars,
  description = EXCLUDED.description,
  primary_language = EXCLUDED.primary_language,
  is_archived = EXCLUDED.is_archived
`

func (q *Queries) InsertRepositories(ctx context.Context) error {
	_, err := q.db.Exec(ctx, insertRepositories)
	return err
}

const insertStars = `-- name: InsertStars :exec
INSERT INTO stars (github_id, stars, time)
SELECT github_id, stars, NOW() FROM temp_repositories
`

func (q *Queries) InsertStars(ctx context.Context) error {
	_, err := q.db.Exec(ctx, insertStars)
	return err
}

type InsertTempRepositoriesParams struct {
	GithubID        string
	NameWithOwner   string
	Description     pgtype.Text
	Stars           int32
	PrimaryLanguage pgtype.Text
	IsArchived      bool
}
