// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForInsertTempRepositories implements pgx.CopyFromSource.
type iteratorForInsertTempRepositories struct {
	rows                 []InsertTempRepositoriesParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertTempRepositories) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertTempRepositories) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].GithubID,
		r.rows[0].NameWithOwner,
		r.rows[0].Description,
		r.rows[0].Stars,
		r.rows[0].PrimaryLanguage,
		r.rows[0].IsArchived,
	}, nil
}

func (r iteratorForInsertTempRepositories) Err() error {
	return nil
}

func (q *Queries) InsertTempRepositories(ctx context.Context, arg []InsertTempRepositoriesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"temp_repositories"}, []string{"github_id", "name_with_owner", "description", "stars", "primary_language", "is_archived"}, &iteratorForInsertTempRepositories{rows: arg})
}
